def profile = System.getProperty("profile") ?: "dev"
println(profile)
sourceSets {
    main {
        java {
            srcDir 'src'
            
        }
        resources{
            //srcDir 'resources'
        	
        	
        }
    }
	main {
		java {
			srcDir 'src'

		}
		if(profile == "dev") {
			resources {
				srcDir 'resources'
				srcDir 'src' exclude '**/*.java'
			}
		}
		else{
			resources {
				srcDir 'resources' exclude '**/*'
				srcDir 'src' exclude '**/*.java'
			}
		}


//			compileClasspath = configurations.compile + configurations.runtime
	}
    test {
        java {
            srcDir 'test'
        }

    }
    
}
/**
if(isIdea){
    task copyTestResources(type: Copy) {
        //from "${projectDir}/resources"
        from sourceSets.test.resources
        into "${buildDir}/classes/"
    }
    processTestResources.dependsOn copyTestResources
}*/

dependencies {
	api (
            [group: 'com.bbossgroups.plugins', name: 'bboss-plugin-kafka2x', version: "${PROJ_BBOSS_plugin_VERSION}", transitive: true],
			[group: 'com.bbossgroups.plugins', name: 'bboss-plugin-apollo', version: "${PROJ_BBOSS_plugin_VERSION}", transitive: true]

    )
	api (
			[group: 'org.apache.kafka', name: 'kafka_2.12', version: "${kafka2x}", transitive: true],
	){
		exclude group: 'log4j', module: 'log4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.zookeeper', module: 'zookeeper'
	}

	api ([group: 'org.apache.kafka', name: 'kafka-tools', version: "${kafka2x}", transitive: true],){
		exclude group: 'log4j', module: 'log4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}

	api ([group: 'org.apache.kafka', name: 'kafka-clients', version: "${kafka2x}", transitive: true],){
		exclude group: 'log4j', module: 'log4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}

	api ([group: 'org.apache.kafka', name: 'kafka-streams', version: "${kafka2x}", transitive: true],){
		exclude group: 'log4j', module: 'log4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}

	api (
			[group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${bboss_version}", transitive: true],
	)

     
}

// 创建可解析的配置
configurations {
    apiResolvable {
        canBeResolved = true
        extendsFrom api
    }
    compileOnlyResolvable {
        canBeResolved = true
        extendsFrom compileOnly
    }

    runtimeOnlyResolvable {
        canBeResolved = true
        extendsFrom runtimeOnly
    }
}
tasks.register('copyJarFiles', Sync) {
    dependsOn 'jar'
    from configurations.apiResolvable {

    }
    from jar.outputs
    exclude { details -> details.file.name.startsWith('bboss-rt') }
    into 'build/dist/lib'

}

tasks.register('copyRTJarFiles', Copy) {
    dependsOn 'copyJarFiles'

    from configurations.apiResolvable {

    }
    include { details -> details.file.name.startsWith('bboss-rt') }
    into 'build/dist'
    rename("bboss-rt-${bboss_version}.jar", "${project.name}-${bboss_version}.jar")
}
tasks.register('copyToolFiles', Copy) {
    dependsOn 'copyRTJarFiles'

    from('runfiles')
            {
                expand(
                        bboss_version: "${bboss_version}",
                        project: "${project.name}"
                )

            }
    filteringCharset = 'UTF-8'
    into 'build/dist/'


}
tasks.register('copyResourcesfiles', Sync) {
    from fileTree(dir: 'src/main/resources')
    filteringCharset = 'UTF-8'
    into 'build/dist/resources'
}

tasks.register('releaseVersion', Zip) {
    dependsOn 'copyToolFiles', 'copyResourcesfiles'

    //appendix = 'wrapper'
    archiveClassifier = 'released'
    from 'build/dist/'

}

