

http.timeoutConnection = 5000
http.timeoutSocket = 50000
http.connectionRequestTimeout=10000
http.retryTime = 5
http.customHttpRequestRetryHandler=org.frameworkset.spi.remote.http.SocketExceptionHttpRequestRetryHandler
#关闭重试机制
http.automaticRetriesDisabled= false
## 每次获取连接时检查连接可用性，不建议使用，推荐使用http.validateAfterInactivity
#http.staleConnectionCheckEnabled=true
## 单位：毫秒，当获取连接时，判断连接是否已经空闲了validateAfterInactivity对应的时间，如果是则对连接进行有效性校验，无效链接直接清理掉
http.validateAfterInactivity=2000
## 主动清理过期的连接，过期时间由timeToLive设置，如果已经设置了validateAfterInactivity，则可以关闭evictExpiredConnections
http.evictExpiredConnections=false
http.timeToLive = 3600000
http.maxLineLength = -1
http.maxHeaderCount = 200
http.maxTotal = 200
http.defaultMaxPerRoute = 100
http.soReuseAddress = false
http.soKeepAlive = false

http.keepAlive = 3600000
http.keystore =
http.keyPassword =
# ssl 主机名称校验，是否采用default配置，
# 如果指定为default，就采用DefaultHostnameVerifier,否则采用 SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER
http.hostnameVerifier =

# 服务代理配置
# 服务全认证账号配置
#http.authAccount=elastic
#http.authPassword=changeme
# ha proxy 集群负载均衡地址配置
http.hosts=localhost:8088
# 健康检查服务
# http.health=/health
# 服务地址自动发现功能
#http.discoverService=com.test.DiscoverService
# 定时运行服务发现方法时间间隔，单位：毫秒，默认10秒
http.discoverService.interval=10000

# handleNullOrEmptyHostsByDiscovery
#false，忽略对返回的null或者空的hosts进行处理
#true，要对null或者空的hosts进行处理，这样会导致所有的地址不可用
http.discoverService.handleNullOrEmptyHostsByDiscovery=false

