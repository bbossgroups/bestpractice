 
configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION	
	ext.bboss_version=PROJ_BBOSS_VERSION
	//ext.isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea')
	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "java-library"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			//javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {
		
		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		sourceCompatibility = JAVADOC_SOURCE_LEVEL
		targetCompatibility = JAVADOC_COMPILER_LEVEL
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
		
	}

	jar {
		manifest {
			attributes (
					'Implementation': archiveVersion,
					'Specification-Version': archiveVersion,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}


	dependencies {
		testImplementation 'junit:junit:4.12'
	}

	repositories {
		mavenLocal()
		maven {
			url "https://maven.aliyun.com/repository/public"
		}

		mavenCentral()

		
	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false  
	}
}

 
configure(subprojects) { subproject ->
	task sourcesJar(type: Jar) {
		archiveClassifier = "sources"
		from sourceSets.main.allJava
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
	}
	processResources {
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
	}
	task javaDocJar(type: Jar, dependsOn: javadoc) {
		archiveClassifier = "javadoc"
		from javadoc.destinationDir
	}
	artifacts {
		archives sourcesJar, javaDocJar
	}

}

configure([project(":websocket"),project(":xmlrequest"),project(":i18n")
			,project(":taglib"),project(":mvc"),project(":easyuidatagrid")
			,project(":demoproject"),project(":bbossupload")]) { subproject ->
	apply plugin: 'war'
   
 
  dependencies {
   
  
	   api  (
	   	  	[group: 'javax.servlet', name: 'jsp-api', version: '2.0', transitive: false],
	        [group: 'javax.servlet', name: 'javax.servlet-api', version: "3.1.0", transitive: false],
	         //[group: 'servletapi', name: 'servletapi', version: '2.4', transitive: false],
	         
	         
	   )
	    providedCompile (
	    	[group: 'javax.servlet', name: 'jsp-api', version: '2.0', transitive: false],
	        [group: 'javax.servlet', name: 'javax.servlet-api', version: "3.1.0", transitive: false],
	    	  //[group: 'servletapi', name: 'servletapi', version: '2.4', transitive: false],
	    )
   }
}