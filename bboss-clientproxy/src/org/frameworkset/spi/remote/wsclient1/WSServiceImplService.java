package org.frameworkset.spi.remote.wsclient1;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2013-11-12T15:00:44.781+08:00
 * Generated source version: 2.7.6
 * 
 */
@WebServiceClient(name = "WSServiceImplService", 
                  wsdlLocation = "http://10.0.15.38:9081/bboss-mvc/cxfservices/mysfirstwsservicePort?wsdl",
                  targetNamespace = "org.frameworkset.web.ws") 
public class WSServiceImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("org.frameworkset.web.ws", "WSServiceImplService");
    public final static QName WSServiceImplPort = new QName("org.frameworkset.web.ws", "WSServiceImplPort");
    static {
        URL url = null;
        try {
            url = new URL("http://10.0.15.38:9081/bboss-mvc/cxfservices/mysfirstwsservicePort?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WSServiceImplService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://10.0.15.38:9081/bboss-mvc/cxfservices/mysfirstwsservicePort?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public WSServiceImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WSServiceImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WSServiceImplService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns WSService
     */
    @WebEndpoint(name = "WSServiceImplPort")
    public WSService getWSServiceImplPort() {
        return super.getPort(WSServiceImplPort, WSService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSService
     */
    @WebEndpoint(name = "WSServiceImplPort")
    public WSService getWSServiceImplPort(WebServiceFeature... features) {
        return super.getPort(WSServiceImplPort, WSService.class, features);
    }

}
