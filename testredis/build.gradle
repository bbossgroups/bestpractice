sourceSets {
    main {
        java {
            srcDir 'src'
            
        }
        resources{
        	
        	
        	
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources{
        	srcDir 'resources'
        }
    }
    
}

dependencies {
	api (
           	[group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25', transitive: true],


            [group: 'com.bbossgroups', name: 'bboss-util', version: "${PROJ_BBOSS_VERSION}", transitive: false],
            
            [group: 'com.bbossgroups', name: 'bboss-data', version: "${PROJ_BBOSS_VERSION}", transitive: false],
            [group: 'com.bbossgroups', name: 'bboss-core', version: "${PROJ_BBOSS_VERSION}", transitive: false],
              [group: 'oro', name: 'oro', version: '2.0.8', transitive: false],
                [group: 'cglib', name: 'cglib-nodep', version: '3.1', transitive: false],
              
              
               [group: 'org.apache.commons', name: 'commons-pool2', version: '2.4.2', transitive: false],
               [group: 'redis.clients', name: 'jedis', version: '2.8.1', transitive: false],
                
               
    )
    runtimeOnly (
			[group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${bboss_version}", transitive: true],
             
               
    )
     
}
task copyJarFiles(type: Sync,dependsOn:'jar'){



	 from configurations.api{
		 canBeResolved=true

	 }
	 from jar.outputs
	 exclude { details -> details.file.name.startsWith('bboss-rt')  }
	 into 'build/dist/lib'

}

task copyRTJarFiles(type: Copy,dependsOn:'copyJarFiles'){
	 from configurations.runtimeOnly{
		 canBeResolved=true

	 } - configurations.api{
		 canBeResolved=true

	 }
	 into 'build/dist'
     rename ("bboss-rt-${bboss_version}.jar", "${project.name}-${bboss_version}.jar")
}
task copyToolFiles(type: Copy ,dependsOn:'copyRTJarFiles')  {
			from ('runfiles')
			{
				expand(
						bboss_version:"${bboss_version}",
                        project:"${project.name}"
						)

			}
		  filteringCharset = 'UTF-8'
			into 'build/dist/'



}
task copyResourcesfiles(type: Sync )  {
	from fileTree(dir: 'resources')
	filteringCharset = 'UTF-8'
	into 'build/dist/resources'
}

task releaseVersion(type: Zip,dependsOn:['copyToolFiles','copyResourcesfiles']) {

    //appendix = 'wrapper'
	archiveClassifier = 'released'


   from 'build/dist/'

}

